#!/usr/bin/env python

import os
import argparse
from collections import defaultdict
from pathlib import Path


def bold_text(text, search_string):
    return text.replace(search_string, f"\033[1m{search_string}\033[0m")


def search_files(
    search_string, directories, show_files=False, show_counts=True, show_lines=False
):
    results = defaultdict(list)

    for base_dir in directories:
        base_path = Path(base_dir)
        if not base_path.exists():
            print(f"Error: {base_dir} directory not found")
            continue

        # Walk through all files in the directory
        for root, _, files in os.walk(base_path):
            for file in files:
                file_path = Path(root) / file
                try:
                    with open(file_path, "r", encoding="utf-8") as f:
                        for line_num, line in enumerate(f, 1):
                            if search_string in line:
                                dir_path = str(Path(root).relative_to(base_path))
                                results[os.path.join(base_dir, dir_path)].append(
                                    (file, line.strip(), line_num)
                                )
                except (UnicodeDecodeError, IOError):
                    continue

    # Sort directories and display results
    for directory in sorted(results.keys()):
        if show_counts:
            count = len(set(f[0] for f in results[directory]))  # Count unique files
            print(f"{directory}: {count}")
        else:
            print(directory)

        if show_files or show_lines:
            # Group by filename to avoid duplicates
            files_dict = defaultdict(list)
            for file, line, line_num in results[directory]:
                files_dict[file].append((line, line_num))

            for file in sorted(files_dict.keys()):
                if show_lines:
                    print(f"  - {file}:")
                    for line, line_num in files_dict[file]:
                        print(f"    {line_num}: {bold_text(line, search_string)}")
                else:
                    print(f"  - {file}")


def main():
    parser = argparse.ArgumentParser(
        description="Search for text in specified directories"
    )
    parser.add_argument("search_string", help="String to search for in files")
    parser.add_argument(
        "directories",
        nargs="*",
        default=["applications"],
        help="Directories to search in (defaults to applications/)",
    )
    parser.add_argument(
        "-f",
        "--files",
        action="store_true",
        help="Show individual filenames containing the search string",
    )
    parser.add_argument(
        "-c",
        "--counts",
        action="store_true",
        help="Show count of matching files per directory",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        help="Show matching lines with the search text bolded",
    )

    args = parser.parse_args()
    search_files(
        args.search_string,
        args.directories,
        show_files=args.files,
        show_counts=args.counts,
        show_lines=args.verbose,
    )


if __name__ == "__main__":
    main()
